package cont;

import javax.swing.JOptionPane;

/*
 *The JOptionPane class is made in order for the user to recieve and input commands
 *into text boxes that appear on the computer screen. The class functions in order
 to display messages and take in input from the user.
 */
public class JOP {

  //Method made in order to display messages to the user.
  //Does NOT take in input from the user.
	public static void msg(String msg) {
		JOptionPane.showMessageDialog(null, msg);
	}
	
  //String method which displays a message to the user, as
  //well as take in a String input from the user and later
  //return it.
	public static String in(String msg){
		return JOptionPane.showInputDialog(msg);
	}
}

-----------------------------------------------------------------------------------------------------------

package mod;

import java.util.Random;

/*
 *The class AI is made in order to function as a sort of artificial intelligence that will use the java
 *random class in order to "randomly" make decisions using the numbers generated by the java random class.
 *It also keeps track of the AI's score, highschool, and decisions that it makes like (like whether it
 *chooses rock, paper, or scissors.
 */
public class AI {

	//Instance variables that keep track of the values of the 's AI's scores as well as the choice 
	//which the AI makes (rock, paper, or scissors), and it then stores that choice into a String
	//variable named guess.
	private int _rCScore;
	private int _hCScore;
	private int computerNum; //0 is rock, 1 is paper, 2 is scissors
	private String guess = "";
	Random random = new Random();
	
	//Void method which generates and determines what choice the bot will choose to play once a random
	//value is pulled from the Java random class.
	public void computerGuess(){
    	
		computerNum = random.nextInt(2);

		if(computerNum == 0) {
			guess = "rock";
		}
		else if(computerNum == 1) {
			guess = "paper";
		}
		else {
			guess = "scissors";
		}
    	}
	
	//Getter String method which returns the guess that the AI has made for the current round.
    	public String getCGuess(){ return guess; }

	//Getter int method which will return the score that the bot has for the current game (best
	//two out of three).
	public int getCRoundScore() { return _rCScore; }
	
	//Getter int method which returns the AI's highest win streak (the amount of consecutive
	//games won.
    	public int getCHighScore() { return _hCScore; }
	
	//Void method which manipulates the variable _rCScore in order to increment every time the
	//AI wins a round against the human.
    	public void incrementCScore() { _rCScore++; }
	
	//Void method which manipulates the variable _hCScore in order to increment it every time
	//the bot wins another consecutive game.
    	public void incrementCHighScore() { _hCScore++; }
	
	//Void method which manipulates the variable _rCScore in order to reset every time a new game
	//starts.
    	public void resetCRoundScore() { _rCScore = 0; }
	
	//Void method which manipulates the variable _hCScore in order to reset the AI's highscore
	//once it loses a game with the player.
    	public void resetCHighScore() { _hCScore = 0; }
}

-----------------------------------------------------------------------------------------------------------

package mod;

import cont.JOP;

/*
 *The Game class is made in order to execute the main commands for the game itself. The class first
 *introduces the player to the instructions of the game as well what options the user has available.
 *Once the player chooses an option, the class will use the input from JOP and .equals in order to
 *determine whether the player will start a new game or view their scores as well as the AI's.
 */
public class Game {
	
	//Instance variables that include two boolean variables which will determine when the game
	//should run specific methods, as well as a String varibale named input which hold the choice
	//that the player makes. Finally theres two Player type variables which will make it easier to
	//use the methods and variables from the Player class in order to create functional players for
	//the game. It also includes and AI type variable which will work as an object that makes it
	//easier to access all of the functions from the AI class.
	boolean _play = true;
	boolean _isPlaying = true;
	String _input = "";
	Player Player1 = new Player();
	Player Player2 = new Player();
	AI _AI = new AI();

	//Constructor for the Game class which initiates the introduction for the player and then asks
	//them what they would wish to do; whether they wanna do pvp or pva (player versus AI). After
	//the player has inputted their decision, the constructor will select what method to perform
	//appropriately by using .equals in order to choose the right path based on the user's String
	//input.
	public Game(){
		JOP.msg("Hey!! Welcome to my game of rock, paper, scissors!"
				+ "\nDon't worry Rico (or grader), I know you don't even wanna look at this,"
				+ "\nbut luckily for you I've made this game so it's simple and easy to play,"
				+ "\nand you could even leave the game any time you so desire."
				+ "\nTo play, just follow the simple instuctions and everything should work just fine.");
		while(_play){
			_isPlaying = true;
			
			String playerOrAI = JOP.in("Go ahead and choose either player vs player (type pvp) or player vs AI (type pva)."
					+ "\nOr well you could also just type \"exit\" if you wish so badly to leave this piece of shi... I mean below average game."
					+ "\n...Oh you're still reading this? Well...um...I didn't really expect you to continue."
					+ "\nWelllll whatever I guess you could sit around here and wait and contemplate life"
					+ "\norrr you could look at the highscores by typing \"highscores\""
					+ "\nor, crazy idea, maybe even try playing the game by typing in your input. You do you.");
			
			if(playerOrAI.equalsIgnoreCase("highscores")) {
				viewHighscores();
			}
			else if(playerOrAI.equalsIgnoreCase("exit")) {
				System.exit(0);
			}
			else {
				if(playerOrAI.equalsIgnoreCase("pvp")){
		    		playerVsPlayer();
		        } 
		    	else if(playerOrAI.equalsIgnoreCase("pva")){
		    		playerVsComputer();
		        } 
		    	else {
		    		JOP.msg("Bro I'm begging you please just pick a valid input"
		    				+ "\nheck you can even type exit for all I care"
		    				+ "\nJUST PICK SOMETHING THAT ACTUALLY WORKS");
		        }
			}
		}
	}
	
	//Void method which retrieves the highscores from player 1, player 2, and the AI itself and prints
	//them all on the screen of the player.
	public void viewHighscores() {
		JOP.msg("Highscores:"
				+ "\nPlayer one: " + Player1.getHighScore()
				+ "\nPlayer two: " + Player2.getHighScoreP2()
				+ "\nAI: " + _AI.getCHighScore());
	}
	
	//Void method which will only be executed when the player chooses the pvp game. Once this method is
	//selected then the method will retrieve the input from both players and then use those inputs in the
	//getWinnerPVP method in order to determine the winner between the two.
	public void playerVsPlayer(){
		JOP.msg("Ah! I see you've selected player vs player. Good pick!");
        while(_isPlaying){
            JOP.msg("The current score is " + Player1.getRoundScore() + " for player one, and " + Player2.getRoundScore() + " for player two.");
            JOP.msg("Player one you're up, look away player two! Don't be a peeping Tom!");
            Player1.inputGuess();
            JOP.msg("Alright you can look now player two! Please do me a favor and type in your pick.");
            Player2.inputGuess();
            getWinnerPVP();
        }
    }
    
    //Void method which will only be selected when the player decided to play against the AI. The method will
    //take in the input from the player as well the AI and then uses the getWinnerPVC method in order to determine
    //the winner between the two.
    public void playerVsComputer(){
    	JOP.msg("Going against the AI I see! You better not let it beat you!");
        while(_isPlaying){
            JOP.msg("The current score is " + Player1.getRoundScore() + " for player one, and " + _AI.getCRoundScore() + " for the AI.");
            JOP.msg("Rise and shine player one! You're up!");
            Player1.inputGuess();
            JOP.msg("It's the AI's turn, watch out!");
            _AI.computerGuess();
            getWinnerPVC();
        }
    }
    
    //Void method that simply takes in the inputs from the both players and then uses .equals in order to determine
    //which player wins. The method also keeps track of the points that both the player and the AI have and then uses 
    if statements in order to determine when either one has won the game (best two out of three).
    public void getWinnerPVP(){
    	/*if(!Player1.getPGuess().equalsIgnoreCase("rock") || !Player1.getPGuess().equalsIgnoreCase("paper") || !Player1.getPGuess().equalsIgnoreCase("scissors")) {
    		JOP.msg("HOLY MOLY WHY CANT PEOPLE THESE DAYS FOLLOW SIMPLE DIRECTIONS"
    				+ "\nPLEASE ENTER A VALID INPUT"
    				+ "\nEITHER ROCK, PAPER, OR SCISSORS");
    	}*/
        if(Player1.getPGuess().equalsIgnoreCase("rock") && Player2.getPGuess().equalsIgnoreCase("paper")){
            Player2.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and player two you guessed " + Player2.getPGuess() + ". Lucky player two takes this round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("paper") && Player2.getPGuess().equalsIgnoreCase("scissors")){
            Player2.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and player two you guessed " + Player2.getPGuess() + ". Player two Snatches this round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("scissors") && Player2.getPGuess().equalsIgnoreCase("rock")){
            Player2.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and player two you guessed " + Player2.getPGuess() + ". OOOO Looks like player two wins this round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("paper") && Player2.getPGuess().equalsIgnoreCase("rock")){
            Player1.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and player two you guessed " + Player2.getPGuess() + ". Player one dominates this round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("scissors") && Player2.getPGuess().equalsIgnoreCase("paper")){
            Player1.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and player two you guessed " + Player2.getPGuess() + ". ANDDD Player one rules the round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("rock") && Player2.getPGuess().equalsIgnoreCase("scissors")){
            Player1.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and player two you guessed " + Player2.getPGuess() + ". Player one destroys the opponent and wins the round!");
        } else{
            JOP.msg("It's... a tie?!?! Wow what are the odds! Well lets go again!");
        }
        if(Player1.getRoundScore() >= 2){
            Player2.resetHighScoreP2();
            Player2.resetRoundScoreP2();
            Player1.resetRoundScore();
            Player1.incrementHighScore();
            JOP.msg("Player one wins the game!"
            		+ "\nTake that player two!");
            _isPlaying = false;
        }
        if(Player2.getRoundScore() >= 2){
            Player1.resetHighScore();
            Player1.resetRoundScore();
            Player2.resetRoundScore();
            Player2.incrementHighScoreP2();
            JOP.msg("Player two wins the game!"
            		+ "\nHow you like them apples player one!");
            _isPlaying = false;
        }
    }
    
    //Void method which performs essentially the same as the getWinnerPVP method. This method simply gets the player's
    //and the AI's input and then uses .equals to determine who wins the round. Similar to the getWinnerPVP method, this
    //method also keeps track of the round scores in order to detemrine when the player or the AI has won the game and
    //then updates the highscores correspondingly.
    public void getWinnerPVC(){
    	/*if(!Player1.getPGuess().equalsIgnoreCase("rock") && !Player1.getPGuess().equalsIgnoreCase("paper") && !Player1.getPGuess().equalsIgnoreCase("scissors")) {
    		JOP.msg("I LITERALLY ASKED YOU TO FOLLOW SIMPLE DIRECTIONS"
    				+ "\nPLEASE ENTER A VALID INPUT THIS TIME");
    	}*/
        if(Player1.getPGuess().equalsIgnoreCase("rock") && _AI.getCGuess().equalsIgnoreCase("paper")){
            _AI.incrementCScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and the AI guessed " + _AI.getCGuess() + ". The AI wins this round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("paper") && _AI.getCGuess().equalsIgnoreCase("scissors")){
            _AI.incrementCScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and the AI guessed " + _AI.getCGuess() + ". The AI takes the round!" + "\nHow are you losing to this??");
        } else if(Player1.getPGuess().equalsIgnoreCase("scissors") && _AI.getCGuess().equalsIgnoreCase("rock")){
            _AI.incrementCScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and the AI guessed " + _AI.getCGuess() + ". The AI wins the round!" + "\nDid you really just let this piece of garbage beat you??");
        } else if(Player1.getPGuess().equalsIgnoreCase("paper") && _AI.getCGuess().equalsIgnoreCase("rock")){
            Player1.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and the AI guessed " + _AI.getCGuess() + ". The human takes the round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("scissors") && _AI.getCGuess().equalsIgnoreCase("paper")){
            Player1.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and the AI guessed " + _AI.getCGuess() + ". Player one demolishes the AI and yoinks the round!");
        } else if(Player1.getPGuess().equalsIgnoreCase("rock") && _AI.getCGuess().equalsIgnoreCase("scissors")){
            Player1.incrementScore();
            JOP.msg("Player one, you guessed " + Player1.getPGuess() + " ,and the AI guessed " + _AI.getCGuess() + ". Player one fries the AI and wins the round!");
        } else{
            JOP.msg("It's a tie! On to the next round.");
        }
        if(_AI.getCRoundScore() >= 2){
            Player1.resetHighScore();
            Player1.resetRoundScore();
            _AI.resetCRoundScore();
            _AI.incrementCHighScore();
            JOP.msg("Computer wins the game!"
            		+ "\nWow you got demolished by a hunk of metal!"
            		+ "\nWhat a loser!!");
            _isPlaying = false;
        }
        if(Player1.getRoundScore() >= 2){
            _AI.resetCHighScore();
            _AI.resetCRoundScore();
            Player1.resetRoundScore();
            Player1.incrementHighScore();
            JOP.msg("Player one wins the game and comes out victorious!"
            		+ "\nWe ain't letting no AI beat us WOOO!");
            _isPlaying = false;
        }
    }
}

-----------------------------------------------------------------------------------------------------------

package mod;

/*
 *Main class made in order to execute the user's code
 */
public class Main {

  //Void method which creates a new Game type variable
  //named obj.
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Game obj = new Game();
	}
}

-----------------------------------------------------------------------------------------------------------

package mod;

import cont.JOP;

/*
 *The player class is made in order to keep track of the player's scores and fuctions as he'she plays the
 *game. The class does everything from verifying that the player has inputted an acceptable play to returning
 *any necessary variable that the program might need.
 */
public class Player {

    //Instance variables which store the player's input, keep track of their round scores, keep track of their
    //high scores, and keep track of player 2's values as well.
    private String _pGuess = "";
    private int _rScore;
    private int _hScore;
    private int _rScoreP2;
    private int _hScoreP2;
    
    //Constructor which initialiazed and sets all of the int values in the class to zero in order to get them
    //ready for the player's inputs.
    public Player() {
    	_rScore = 0;
    	_hScore = 0;
    	_rScoreP2 = 0;
    	_hScoreP2 = 0;
    }
    
    //Void method which will retrieve the user's input using the JOP class in order to store the new String in
    //a variable that will determine whether or not the player has inputted an acceptable choice. The method will
    //also make sure that it continues running until the player has typed a valid input.
    public void inputGuess(){
    	
        boolean valid = false; //Variable that becomes true if the string input is correct
        //_pGuess = JOP.in("Pick rock, paper or scissors.");
        
        
        while(!valid) {
        	_pGuess = JOP.in("Select rock, paper or scissors (or exit if you wish to leave).");
        	if(_pGuess.equalsIgnoreCase("exit")) {
        		System.exit(0);
        	}
        	else if (!_pGuess.equalsIgnoreCase("rock") && !_pGuess.equalsIgnoreCase("paper") && !_pGuess.equalsIgnoreCase("scissors")) {
                JOP.msg("bro... how'd you mess something so simple."
                		+ "\nyou had the option between rock, paper, or scissors."
                		+ "\nImma just go ahead an give you another try."
                		+ "\nAND DONT MESS IT UP THIS TIME");
            }
            else {
                valid = true;
            }
        }
    }
    
    //Getter String method which returns player's input (rock, paper, or scissors).
    public String getPGuess() { return _pGuess; }
    
    //Getter int method which returns the value of the number of rounds that player one has won in a certain game.
    public int getRoundScore() { return _rScore; }
    
    //Getter int method which returns the int value of player 1's highscore (the amount of consecutive rounds won).
    public int getHighScore() { return _hScore; }
    
    //Getter int method which returns the value of the number of rounds that player two has won in a certain game
    public int getRoundScoreP2() { return _rScoreP2; }
    
    //Getter int method which returns the int value of player 2's highscore (the amount of consecutive rounds won).
    public int getHighScoreP2() { return _hScoreP2; }
    
    //Void method which manipulates the variable _rScore in order to increment the value of player 1's number of rounds won in a certain game.
    public void incrementScore() { _rScore++; }
    
    //Void method which manipulates the variable _rScoreP2 in order to increment the value of player 2's number of rouns won in a certain game.
    public void incrementScoreP2() { _rScoreP2++; }
    
    //Void method which manipulates the variable _hScore in order to increment player 1's highscore value when he/she has won consecutively.
    public void incrementHighScore() { _hScore++; }
    
    //Void method which manipulates the variable _hScoreP2 in order to increment player 2's highscore value when he/she has won consecutively.
    public void incrementHighScoreP2() { _hScoreP2++; }
    
    //Void method which manipulates the variable _rScore in order to reset it once player one begins a new game.
    public void resetRoundScore() { _rScore = 0; }
    
    //Void method which manipulates the variable _hScore in order to reset it once player one has lost their win streak.
    public void resetHighScore() { _hScore = 0; }
    
    //Void method which manipulates the variable _rScoreP2 in order to reset it once player two begins a new game.
    public void resetRoundScoreP2() { _rScoreP2 = 0; }
    
    //Void method which manipulates the variable _hScoreP2 in order to reset it once player two has lost their win streak.
    public void resetHighScoreP2() { _hScoreP2 = 0; }
}
