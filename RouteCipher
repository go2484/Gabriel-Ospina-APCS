package cont;

import javax.swing.JOptionPane;

/*
 *The JOptionPane class is made in order for the user to recieve and input commands
 *into text boxes that appear on the computer screen. The class functions in order
 to display messages and take in input from the user.
 */
public class JOP {

  //Method made in order to display messages to the user.
  //Does NOT take in input from the user.
	public static void msg(String msg) {
		JOptionPane.showMessageDialog(null, msg);
	}
	
  //String method which displays a message to the user, as
  //well as take in a String input from the user and later
  //return it.
	public static String in(String msg){
		return JOptionPane.showInputDialog(msg);
	}
}

-----------------------------------------------------------------------------------------------------------

package mod;

import java.util.HashMap;

/*
 *The class cypher is made in order to encrypt and decrypt the messages inputted by the user
 *by using hashmaps imported by the java util class.
 */
public class Cypher {

    //Instance variable declared and initialized in order to be used as a counter and
    //as holders for the hashmap codes.
    private static int cnt = 0;
    private static HashMap<String, String> numsToLetters  = generateNumsToLetters();
    private static HashMap<String, String> lettersToNums  = generateLetterstoNums();

    //Constructor for the Cypher class which creates a Cypher object that will later
    //represent the encrypted message that the user will receive.
    public Cypher() {
        for (int charNum = 0, indexNum = 0; charNum <= 127; charNum++, indexNum++) {
            numsToLetters.put("" + indexNum, Character.toString((char) charNum));
            lettersToNums.put(Character.toString((char) charNum), "" + indexNum);
        }
    }

    //String method which encrypts the inputted String from the user and turns it into
    //an array of characters that will later be used on a hashmap so they could be encrypted.
    public static String encrypt(String message) {
        String tempMessage = "";
        cnt = 0;
        char[] charArray = message.toCharArray();
        for (char c : charArray) {
            tempMessage += lettersToNums.get(Character.toString(c)) + " ";
            cnt++;
        }
        return tempMessage;
    }

    //String array which returns the decrypted version of the encrypted message. The method
    //goes through the individual letter that are left after the message has been translated
    //back into letters and then puts them together in order to form the original phrase again.
    public static String decrypt(String message) {
        String[] arrayMessage = message.split(" ", 0);
        String tempMessage = "";
        for (String block : arrayMessage) {
            tempMessage += numsToLetters.get(block);
        }
        return tempMessage;
    }

    //A hashmap type method which utilizes the hashmap functions from the java class and
    //then uses it in order to decode the encrypted message and turn it back into letters.
    //At the end it returns a String of all the letters in the encrypted message.
    public static HashMap<String, String> generateNumsToLetters() {
        HashMap<String, String> numsToLetters  = new HashMap<String, String>();
        for (int charNum = 0, indexNum = 0; charNum <= 127; charNum++, indexNum++) {
            numsToLetters.put("" + indexNum, Character.toString((char) charNum));
        }

        return numsToLetters;
    }

    //A hashmap type method that encrypts the inputted message of the user by using the
    //hashmaps in order to convert the words of the original message into numbers, which
    //would function as a hidden message.
    public static HashMap<String, String> generateLetterstoNums() {
        HashMap<String, String> lettersToNums  = new HashMap<String, String>();
        for (int charNum = 0, indexNum = 0; charNum <= 127; charNum++, indexNum++) {
            lettersToNums.put(Character.toString((char) charNum), "" + indexNum);
        }

        return lettersToNums;
    }
    
    //String method toString which simply returns a String containing the number of rows
    //and columns that will be used in order to encrypt the message.
    public static String info(String message) {
        int rows = (int) Math.sqrt(Math.sqrt(message.length()));
        return "# of Rows: " + rows + "\n# of Cols: " + rows + "\nTotal Dimensions: " + rows * rows;
    }
    
    //Geter method that simply returns the value of the counter at any certain point in the code.
    public int getCnt() {
    	return cnt;
    }
}

-----------------------------------------------------------------------------------------------------------

package mod;

/*
 *Main class made in order to execute the user's code
 */
public class Main {

  //Void method which creates a new Program type variable
  //named obj.
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Program obj = new Program();
	}
}

-----------------------------------------------------------------------------------------------------------

package mod;

import cont.JOP;

/*
 *The class Program introduces the user to the instuctions and uses of the encrypter and decrypter
 *that he/she will be using. The class takes in the inputs fromt the user and then manipulates it
 *depending on what the user wishes to do.
 */
public class Program {

	//Instance variables which create acces to the Cypher class, a boolean which determines when
	//to run each task, and variable to store the text inputs of the user, and storage spaces in
	//to save previously encrypted texts.
	private Cypher _c = new Cypher();
	private boolean running = true;
	private String input = "";
	private String storage1 = "";
	private String storage2 = "";
	private String storage3 = "";
	private String storage4 = "";
	private String storage5 = "";

	//Constructor for the Program class which commences the the code and explains what the user can do
	//within the program. It gives them the option to either encrypt a new phrase or decrypt a previously
	//made phrase.
	public Program() {
		while (running) {
			input = JOP.in("Welcome to Route Cipher."
					+ "\nIf you would like to encrypt a message please type \"encrypt\" into the bar below"
					+ "\nIf you would like to decryot a previously encrtpted message please type \"decrypt\" into the bar below"
					+ "\nTo exit just click the x or type \"exit\" to close the program"
					+ "\n(You first have to encrypt a phrase in order to be able to decrypt anything)");
			if (input.equalsIgnoreCase("exit")) {
				System.exit(0);
			}
			if (input.equalsIgnoreCase("encrypt")) {
				encrypt();
			}
			if (input.equalsIgnoreCase("decrypt")) {
				decrypt();
			}
		}
	}

	//Void method which manipulates the user's initial message in order to encrypt it into
	//a secret message made up of numbers instead of letters. The method uses JOP in order
	//to retreive the message from the user and then uses the cypher class and hashmap to
	//transform the inputted phrase into a series of encrypted numbers. This portion of the
	//program also give the user the option to save their encrypted message into any available
	//save spot within the code.
	public void encrypt() {
		String choice = "";
		String msg = "";
		String emsg = "";
		boolean run = true;
		while (run) {
			msg = JOP.in("Please type out the message you would wish to encrypt.");
			if (!msg.equals("")) {
				run = false;
			}
		}
		emsg = _c.encrypt(msg);

		run = true;
		while (run) {
			choice = JOP.in("In which storage file would you like to place your encrypted message?"
					+ "\n(pick a file number from 1-5)");
			if (choice.equals("1") || choice.equals("2") || choice.equals("3") || choice.equals("4")
					|| choice.equals("5")) {
				run = false;
			}
		}

		if (choice.equals("1")) {
			storage1 = emsg;
		} else if (choice.equals("2")) {
			storage2 = emsg;
		} else if (choice.equals("3")) {
			storage3 = emsg;
		} else if (choice.equals("4")) {
			storage4 = emsg;
		} else if (choice.equals("5")) {
			storage5 = emsg;
		}

		JOP.msg("Your LetterBlocks are composed of:" + "\n" + _c.info(emsg));
		JOP.msg("it takes " + _c.getCnt() +" blocks to encrypt your phrase");
		JOP.msg("Your encrypted code is:" + "\n" + emsg);

	}

	//Void methods which manipulates the encrypted message in order to turn it back into regular
	//letters that are readable to the user. The method retrieves any specified encrypted message
	//from the five available save spots and then uses the Cypher class and hashmaps to return the
	//original phrase to the user.
	public void decrypt() {
		String dmsg = "";
		String code = "";
		String file = "";
		boolean run = true;
		while (run) {
			file = JOP.in("Which file would you like to decrypt?" + "\n(pick a file number from 1-5)");
			if (file.equals("1") || file.equals("2") || file.equals("3") || file.equals("4")
					|| file.equals("5")) {
				run = false;
			}
		}

		if (file.equals("1")) {
			code = storage1;
		} else if (file.equals("2")) {
			code = storage2;
		} else if (file.equals("3")) {
			code = storage3;
		} else if (file.equals("4")) {
			code = storage4;
		} else if (file.equals("5")) {
			code = storage5;
		}

		dmsg = _c.decrypt(code);

		JOP.msg("Your decrypted code is:" + "\n" + dmsg);
	}
}
