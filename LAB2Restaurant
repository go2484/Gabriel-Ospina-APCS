package cont;

import javax.swing.JOptionPane;

/*
 *The JOptionPane class is made in order for the user to recieve and input commands
 *into text boxes that appear on the computer screen. The class functions in order
 to display messages and take in input from the user.
 */
public class JOP {

  //Method made in order to display messages to the user.
  //Does NOT take in input from the user.
	public static void msg(String msg) {
		JOptionPane.showMessageDialog(null, msg);
	}
	
  //String method which displays a message to the user, as
  //well as take in a String input from the user and later
  //return it.
	public static String in(String msg){
		return JOptionPane.showInputDialog(msg);
	}
}

-----------------------------------------------------------------------------------------------------------

package mod;

/*
 *Main class made in order to execute the user's code
 */
public class Main {

  //Void method which creates a new MasterOrder type variable
  //named obj.
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MasterOrder obj = new MasterOrder();
	}
}

-----------------------------------------------------------------------------------------------------------

package mod;

import java.util.ArrayList;
import cont.JOP;

/*
 *The class MasterOrder takes in the input from the user in order to place or remove food orders from the
 *user's check. The class introduces the user to the intructions of the program and later gives them the
 *option to add, remove or view the different orders placed within the MasterOrder class.
 */
public class MasterOrder {

    //Instance variables that create the ArrayList of orders that are made by the user, as well as a boolean
    //variable that will determine when the program should run specific methods.
    private ArrayList<Order> orders;
    boolean running = true;
    
    //Constructor for the MasterOrder class which creates the object for the order list as well as intiates
    //the main program that will execute all the commands for the instructions and methods.
    public MasterOrder() {
        orders = new ArrayList<Order>();
        this.update();
    }
    
    //Void update method that will display the instructions to the user using the JOP class that will cause
    //panes to appear that will explain to the user what to do and give them the options that they have
    //available to manipulate the order list.
    public void update(){
        while(running) {
            String usrInput = JOP.in("Welcome to the ordering program! \n Type order to start ordering \n Type print to print the orders \n Type remove to remove an order \n Type clear to clear parts of the order list \n Type total orders to display the number of each product being ordered \n Type quit to exit the program");
            if (usrInput.equalsIgnoreCase("order")) {
                try { this.addOrder(); }
                catch (Exception O) { JOP.msg("Not a valid response."); }
            } else if (usrInput.equalsIgnoreCase("print")) {
                String printType = JOP.in("Enter a buyer to print orders from them, or leave it blank to print all orders.");
                if (printType.equals("")) { this.printOrders(); }
                else { this.printOrders(printType); }
            } else if (usrInput.equalsIgnoreCase("remove")) {
                try { this.remove(); }
                catch (Exception P) { JOP.msg("Not a valid response"); }
            } else if (usrInput.equalsIgnoreCase("clear")) {
                String removeType = JOP.in("Type buyer to remove orders by buyer \n Type product to remove orders by product");
                if (removeType.equalsIgnoreCase("buyer")) {
                    this.clearAllBuyers();
                } else if (removeType.equalsIgnoreCase("product")) {
                    try { this.clearAllProducts(); }
                    catch (Exception Q) { JOP.msg("Not a valid response");}
                }
            } else if(usrInput.equalsIgnoreCase("total orders")) {
                outputAmtToFulfillAll();
            } else if (usrInput.equalsIgnoreCase("quit")) { running = false; }
        }
    }

    //Void method which will take in the inputted order from the user and then adds it to the orders ArrayList
    //that was created at the beginning of the class.
    public void addOrder() {
        String p = JOP.in("Enter in the name of the product you want. Your options are: White chocolate, milk chocolate and dark chocolate.");
        if(!p.equalsIgnoreCase("milk chocolate") && !p.equalsIgnoreCase("dark chocolate") && !p.equalsIgnoreCase("white chocolate")){
            throw new NullPointerException("We don't have that.");
        }
        String b = JOP.in("Enter the name your name. You will be identified by this.");
        int a = Integer.parseInt(JOP.in("How many of the order do you want? Enter a number."));
        Order o = new Order(p.toLowerCase(), b, a);
        orders.add(o);
    }

    //Void method which goes through the ArrayList of orders and then prints them onto the screen of the user
    //using the JOP class.
    public void printOrders() {
        String orderStr = "";
        for(Order o : orders) { orderStr += o; }
        if(!orderStr.equals("")){ JOP.msg(orderStr); }
        else{ JOP.msg("There are currently no orders"); }
    }

    //Void method which takes in a parameter from the user in order to properly search through the list of the
    //orders and successfully retrieve the orders that belong to that specific customer. The method will also
    //return and messages warning if a certain customer doesn't have anything ordered under their name.
    public void printOrders(String buyer) {
        String orderStr = "";
        for(Order o : orders) {
            if(o.getBuyer().equals(buyer)) {
                orderStr += o;
            }
        }
        if(!orderStr.equals("")) { JOP.msg(orderStr); }
        else{ JOP.msg("There are currently no orders."); }
    }

    //Void method which manipulates the list of orders in order to remove any plates that match with the name
    //that the user has specified to remove.
    public void clearAllProducts() {
        String product = JOP.in("Enter the name of the product you wish to clear");
        for(int i = 0; i < orders.size(); i++) {
            if(orders.get(i).getProduct().equals(product)) {
                orders.remove(i);
                i--;
            }
        }
    }

-----------------------------------------------------------------------------------------------------------

package mod;

import java.util.ArrayList;

/*
 *The class Menu is created in order to create the view of the menu layout and and the objects that will be
 *needed so that the menu could be created with all the available plates. The class also helps retrieve and
 *add more orders onto the list in the menu
 */
public class Menu {
	
	        //Instance variable that create an object for the Orders class in order to make it easier to
		//access the methods within the Order class. These instance variables also establish the main
		//components of the menu and where the different plates will be stored.
		private Order _f;
		private String _curMenuOutline = "________________________________________________________________"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |                                                                |"
								   + "\n |________________________________________________________________|";
		
		private String _menu = "Bandeja Paisa - $25.00"
							 + "\nSancocho - $15.00"
							 + "\nLechona - $13.00";
		
		private ArrayList<String> hey;
		
		//Constructor for the Menu class which initializes the object made for the Order class so that
		//it could receive the correct information in order to construct the correct order for the user.
		//The constructor also initializes the String ArrayList which will hold the orders placed by the
		//customer.
		public Menu() {
			_f = new Order(_f.getProduct());
			hey = new ArrayList<String>();
		}
		
		//Getter String method which will retrieve the visual layout of the menu as a String.
		public String getMenuOutline() { return _curMenuOutline; }
		
		//Getter String method which will retrieve the items that will be included within the menu of the 
		//restaurant and returns them as a String.
		public String getMenu() { return _menu; }
		
		//Getter String method which will return all of the information on the menu as a String.
		public String toString() { return _menu; }
		
		//Void method which manipulates the list of orders in order to add more objects onto the list of
		//orders placed by the user.
		public void addOrder() { hey.add(_food) }
}

-----------------------------------------------------------------------------------------------------------

package mod;

/*
 *The class Order is made in order to help manipulate and create the information that will be included on
 *list of orders that will be created by the user. It takes in input from hte used in order to create objects
 *that contain information such as the food ordered or the name of the customer.
 */
public class Order {

    //Instance variables which will hold the information about the food which the user orders, the name of the
    //customer himself/herself, and the amount that each plate costs
    private String _food;
    private String _customer;
    private int _amount;

    //Constructor for the Order class which initializes the values of the all the instance variables with the
    //values inputted by the user.
    public Order(String s, String c, int a) {
        _food = s;
        _customer = c;
        _amount = a;
    }

    //Getter String method which returns a String containing the specific product that the user wishes to view.
    public String getProduct() { return _food; }
    
    //Getter String method which will retrieve and return the name of the customer that the user wishes to view.
    public String getBuyer() { return _customer; }
    
    //Getter int method which will return and int values which indicates the price of a specific order.
    public int getAmount() { return _amount; }

    //String method which will use the JOP class in order to turn all the information inputted by the user into
    //an eligible phrase that contains all the important information about the order, including the name, the
    price, and the food that was ordered.
    public String toString(){
        return "" + _customer + " ordered " + _amount + " of " + _food;
    }
}
